(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{359:function(s,a,t){"use strict";t.r(a);var e=t(42),_=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_0x01-流程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-流程控制"}},[s._v("#")]),s._v(" 0x01 流程控制")]),s._v(" "),t("h2",{attrs:{id:"_1-for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-for"}},[s._v("#")]),s._v(" 1 for")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Go 只有一种循环结构："),t("code",[s._v("for")]),s._v(" 循环。")])]),s._v(" "),t("li",[t("p",[s._v("基本的 "),t("code",[s._v("for")]),s._v(" 循环由三部分组成，它们用分号隔开：")]),s._v(" "),t("ul",[t("li",[s._v("初始化语句：在第一次迭代前执行")]),s._v(" "),t("li",[s._v("条件表达式：在每次迭代前求值")]),s._v(" "),t("li",[s._v("后置语句：在每次迭代的结尾执行")])])]),s._v(" "),t("li",[t("p",[s._v("初始化语句通常为一句短变量声明，该变量声明仅在 "),t("code",[s._v("for")]),s._v(" 语句的作用域中可见。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("注意")]),s._v("：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 "),t("code",[s._v("{ }")]),s._v(" 则是必须的。")])]),s._v(" "),t("li",[t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("golang中，"),t("code",[s._v("++")]),s._v("、"),t("code",[s._v("--")]),s._v("只能作为语句不能作为表达式，只能放在变量的后面不能放在前面。")])]),s._v(" "),t("li",[t("p",[s._v("初始化语句和后置语句是可选的。")])]),s._v(" "),t("li",[t("p",[s._v("go中的"),t("code",[s._v("while")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" sum\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("无限循环")]),s._v(" "),t("p",[s._v("如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"_2-if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-if"}},[s._v("#")]),s._v(" 2 if")]),s._v(" "),t("ul",[t("li",[s._v("Go 的 "),t("code",[s._v("if")]),s._v(" 语句与 "),t("code",[s._v("for")]),s._v(" 循环类似，表达式外无需小括号 "),t("code",[s._v("( )")]),s._v(" ，而大括号 "),t("code",[s._v("{ }")]),s._v(" 则是必须的。")]),s._v(" "),t("li",[s._v("if 的简短语句，同 "),t("code",[s._v("for")]),s._v(" 一样， "),t("code",[s._v("if")]),s._v(" 语句可以在"),t("strong",[s._v("条件表达式前")]),s._v("执行一个简单的语句。该语句声明的变量作用域仅在 "),t("code",[s._v("if")]),s._v(" 之内。")])]),s._v(" "),t("h2",{attrs:{id:"_3-if-和-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-if-和-else"}},[s._v("#")]),s._v(" 3 if 和 else")]),s._v(" "),t("ul",[t("li",[s._v("在 "),t("code",[s._v("if")]),s._v(" 的简短语句中声明的变量同样可以在任何对应的 "),t("code",[s._v("else")]),s._v(" 块中使用。")])]),s._v(" "),t("h2",{attrs:{id:"_4-switch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-switch"}},[s._v("#")]),s._v(" 4 switch")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("switch")]),s._v(" 是编写一连串 "),t("code",[s._v("if - else")]),s._v(" 语句的简便方法。它运行第一个值等于条件表达式的 case 语句。")]),s._v(" "),t("li",[s._v("Go 的 switch 语句类似于 C、C++、Java、JavaScript 和 PHP 中的，不过 Go 只运行选定的 case，而非之后所有的 case。")]),s._v(" "),t("li",[s._v("Go 自动提供了在这些语言中每个 case 后面所需的 "),t("code",[s._v("break")]),s._v(" 语句。 除非以 "),t("code",[s._v("fallthrough")]),s._v(" 语句结束，否则分支会自动终止。")]),s._v(" "),t("li",[s._v("Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数。")])]),s._v(" "),t("h2",{attrs:{id:"_5-switch-的求值顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-switch-的求值顺序"}},[s._v("#")]),s._v(" 5 switch 的求值顺序")]),s._v(" "),t("ul",[t("li",[s._v("switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。")])]),s._v(" "),t("h2",{attrs:{id:"_6-没有条件的switch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-没有条件的switch"}},[s._v("#")]),s._v(" 6 没有条件的switch")]),s._v(" "),t("ul",[t("li",[s._v("没有条件的 switch 同 "),t("code",[s._v("switch true")]),s._v(" 一样。")]),s._v(" "),t("li",[s._v("这种形式能将一长串 if-then-else 写得更加清晰。")])]),s._v(" "),t("h2",{attrs:{id:"_7-defer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-defer"}},[s._v("#")]),s._v(" 7 defer")]),s._v(" "),t("ul",[t("li",[s._v("defer 语句会将函数推迟到外层函数返回之后执行。")]),s._v(" "),t("li",[s._v("推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。")])]),s._v(" "),t("h2",{attrs:{id:"_8-defer-栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-defer-栈"}},[s._v("#")]),s._v(" 8 defer 栈")]),s._v(" "),t("ul",[t("li",[s._v("推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);